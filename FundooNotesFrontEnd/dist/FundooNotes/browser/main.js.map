{"version":3,"file":"main.js","mappings":"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","sources":["./$_lazy_route_resources|lazy|groupOptions: {}|namespace object","./src/app/Components/add-note/add-note.component.ts","./src/app/Components/add-note/add-note.component.html","./src/app/Components/forget-password/forget-password.component.ts","./src/app/Components/forget-password/forget-password.component.html","./src/app/Components/home/home.component.ts","./src/app/Components/home/home.component.html","./src/app/Components/login/login.component.ts","./src/app/Components/login/login.component.html","./src/app/Components/note-icons/note-icons.component.ts","./src/app/Components/note-icons/note-icons.component.html","./src/app/Components/register/register.component.ts","./src/app/Components/register/register.component.html","./src/app/Components/reset-password/reset-password.component.ts","./src/app/Components/reset-password/reset-password.component.html","./src/app/Services/HttpService/http-service.service.ts","./src/app/Services/NoteService/note-service.service.ts","./src/app/Services/UserService/user-service.service.ts","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/environments/environment.ts","./src/main.ts"],"sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(() => {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = () => ([]);\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 8255;\nmodule.exports = webpackEmptyAsyncContext;","import { Component, OnInit } from '@angular/core';\nimport { FormControl, Validators, FormGroup } from '@angular/forms';\nimport { UserServiceService } from 'src/app/Services/UserService/user-service.service';\nimport {MatSnackBar} from '@angular/material/snack-bar';\nimport { Router } from '@angular/router';\n@Component({\n  selector: 'app-add-note',\n  templateUrl: './add-note.component.html',\n  styleUrls: ['./add-note.component.scss']\n})\nexport class AddNoteComponent implements OnInit {\n  smallNote:boolean = true;\n  bigNote:boolean = false;\n  NoteForm !: FormGroup;\n  pinned:boolean = false;\n  constructor(private snackBar:MatSnackBar) { }\n\n  ngOnInit(): void {\n    this.NoteForm = new FormGroup({\n      Title: new FormControl(),\n      Description:new FormControl()\n    });\n  }\n  showNote()\n  {\n    this.smallNote = false;\n    this.bigNote = true;\n  }\n  pinNote()\n  {\n    this.snackBar.open(`${this.pinned?'Note unpinned':'Note Pinned'}`, '', {\n        duration: 2000,\n        verticalPosition: 'bottom',\n        horizontalPosition: 'left'\n      });\n      this.pinned=!this.pinned;\n    \n  }\n}\n","<mat-card *ngIf=\"smallNote\" (click)=\"showNote()\">\n    <mat-card-title class=\"small-card-title\">\n       <input type=\"text\" placeholder=\"Take a Note...\"> \n    </mat-card-title>\n    <mat-card-subtitle class=\"icons\">\n        <mat-icon mat-list-icon class= \"material-icons-outlined\">check_box</mat-icon>\n        <mat-icon mat-list-icon class= \"material-icons-outlined\">brush</mat-icon>\n        <mat-icon mat-list-icon class= \"material-icons-outlined\">crop_original</mat-icon>  \n    </mat-card-subtitle>\n</mat-card>\n<mat-card class=\"bigCard\" *ngIf=\"bigNote\">\n    <form [formGroup]=\"NoteForm\">\n        <mat-card-title class=\"big-card-title\">\n            <textarea cdkTextareaAutosize placeholder=\"Title\" class=\"textarea\" formControlName =\"Title\"></textarea>\n            <button mat-icon-button class=\"example-icon favorite-icon\" (click)=\"pinNote()\">\n                <mat-icon mat-list-icon class= \"material-icons-outlined\" style=\"color:#767676 ;\" *ngIf=\"!pinned\">push_pin</mat-icon>\n                <mat-icon mat-list-icon style=\"color:#767676 ;\" *ngIf=\"pinned\">push_pin</mat-icon>\n            </button>\n        </mat-card-title>\n        <mat-card-content class=\"big-card-content\">\n        <textarea cdkTextareaAutosize placeholder=\"Take a Note...\" class=\"textarea\" formControlName =\"Description\"></textarea>\n        </mat-card-content>\n        <mat-card-footer>\n            <app-note-icons></app-note-icons>\n        </mat-card-footer>\n    </form>\n</mat-card> \n","import { Component, OnInit } from '@angular/core';\r\nimport { FormControl, Validators, FormGroup } from '@angular/forms';\r\nimport { UserServiceService } from 'src/app/Services/UserService/user-service.service';\r\nimport {MatSnackBar} from '@angular/material/snack-bar';\r\nimport { Router } from '@angular/router';\r\n@Component({\r\n  selector: 'app-forget-password',\r\n  templateUrl: './forget-password.component.html',\r\n  styleUrls: ['./forget-password.component.scss']\r\n})\r\nexport class ForgetPasswordComponent implements OnInit {\r\n  ForgetPasswordForm!: FormGroup;\r\n  constructor(private userService:UserServiceService, private snackBar:MatSnackBar, private router:Router) { }\r\n\r\n  ngOnInit(): void {\r\n    this.ForgetPasswordForm = new FormGroup({\r\n      email: new FormControl('',[Validators.required])\r\n    });\r\n  }\r\n\r\n  forgetPassword()\r\n  {\r\n    console.log(\"hello\");\r\n    this.userService.ForgetPassword(this.ForgetPasswordForm.value.email)\r\n    .subscribe((result:any)=>{\r\n      localStorage.setItem('token',result.data);\r\n      localStorage.setItem('email',this.ForgetPasswordForm.value.email);\r\n      this.snackBar.open(`${result.message}`, '', {\r\n          duration: 3000,\r\n          verticalPosition: 'bottom',\r\n          horizontalPosition: 'left'\r\n        });\r\n      if(result.status)\r\n        this.router.navigate(['/login']);\r\n    },error => {  \r\n      this.snackBar.open(`${error.error.message}`, '', {\r\n        duration: 3000,\r\n        verticalPosition: 'bottom',\r\n        horizontalPosition: 'left'\r\n      });\r\n    })\r\n  }\r\n\r\n}\r\n","<div class=\"ForgetPassword_container\">\r\n    <mat-card class=\"ForgetPassword_card\">\r\n      <div class=\"ForgetPassword_inputs\">\r\n        <mat-card-title>\r\n          <span style=\"color: #4285F4;\">F</span>\r\n          <span style=\"color: #EA4335;\">u</span>\r\n          <span style=\"color: #FBBC05;\">n</span>\r\n          <span style=\"color: #4285F4;\">d</span>\r\n          <span style=\"color: #34A853;\">o</span>\r\n          <span style=\"color: #EB4E41;\">o</span>\r\n        </mat-card-title>\r\n        <h2>Forget Password</h2>\r\n        <h3>Enter your email</h3>\r\n  \r\n        <form class=\"ForgetPassword-form\" [formGroup] =\"ForgetPasswordForm\">\r\n          <div>\r\n            <mat-form-field appearance=\"outline\">\r\n              <mat-label>User name</mat-label>\r\n              <input type=\"email\" matInput id=\"email\" formControlName =\"email\">\r\n              <mat-error *ngIf=\"ForgetPasswordForm.controls['email'].invalid\">value is required</mat-error>\r\n            </mat-form-field>\r\n          </div>\r\n          <div class=\"button_container\">\r\n            <button [routerLink]=\"['/login']\" mat-button color=\"primary\">Go back</button>\r\n            <button type=\"submit\" [disabled]=\"ForgetPasswordForm.invalid\" mat-raised-button color=\"primary\" (click)=\"forgetPassword()\">Next</button>\r\n          </div>\r\n  \r\n        </form>\r\n      </div>\r\n    </mat-card>\r\n  </div>\r\n\r\n","import { Component, OnInit, ViewEncapsulation } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.scss']\r\n})\r\nexport class HomeComponent implements OnInit {\r\n  opened: boolean = true;\r\n  list: boolean = true;\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n  toggleView()\r\n  {\r\n    this.list = !this.list;\r\n  }\r\n}\r\n","<div class=\"home_container\">\r\n    <mat-toolbar>\r\n        <div class=\"logo\">\r\n            <button mat-icon-button (click)=\"sidenav.toggle()\">\r\n                <mat-icon class=\"menu-icon\">menu</mat-icon>\r\n            </button>\r\n            <span>\r\n                <img src=\"../../../assets/images/fundooLogo.png\" class=\"img_logo\" />\r\n            </span>\r\n            <span style=\"color:#5F6C7F\">Fundoo</span>\r\n        </div>\r\n        <div>\r\n            <mat-form-field class=\"example-full-width\" appearance=\"fill\" [style.width.px]=600>\r\n                <input matInput placeholder=\"Search\">\r\n                <mat-icon matPrefix [style.margin-right.px]=12>search</mat-icon>\r\n                <mat-icon matSuffix>close</mat-icon>\r\n            </mat-form-field>\r\n        </div>\r\n        <div>\r\n            <button mat-icon-button class=\"example-icon favorite-icon\" (click)=\"toggleView()\">\r\n                <mat-icon *ngIf=\"list\">view_list</mat-icon>\r\n                <mat-icon *ngIf=\"!list\">view_module</mat-icon>\r\n            </button>\r\n\r\n            <button mat-icon-button [matMenuTriggerFor]=\"menu\" class=\"example-icon\" aria-label=\"Example icon-button with share icon\">\r\n                <mat-icon>account_circle</mat-icon>\r\n            </button>\r\n            <mat-menu #menu=\"matMenu\" class=\"profileMenu\">\r\n                <img src=\"../../../assets/images/profilePic.PNG\" class=\"profilePic\">\r\n                <h1>Diwakar N</h1>\r\n                <p>diwakarn@gmail.com</p>\r\n                <mat-divider style=\"margin-top: 20px;\"></mat-divider>\r\n                <button mat-stroked-button style=\"margin:10px 0\">Sign out</button>\r\n                <mat-divider></mat-divider>\r\n            </mat-menu>\r\n        </div>\r\n    </mat-toolbar>\r\n    <mat-sidenav-container class=\"main\">\r\n        <mat-sidenav #sidenav mode=\"side\" [(opened)]=\"opened\" class=\"side_nav\" (mouseover)='opened=true'>\r\n            <mat-nav-list>\r\n                <mat-list-item>\r\n                    <mat-icon mat-list-icon class=\"sidenavLogo\">lightbulb_outline</mat-icon>\r\n                    <h4 mat-line>Notes</h4>\r\n                </mat-list-item>\r\n                <mat-list-item>\r\n                    <mat-icon mat-list-icon class=\"sidenavLogo\">notifications_none</mat-icon>\r\n                    <h4 mat-line>Reminders</h4>\r\n                </mat-list-item>\r\n                <mat-list-item>\r\n                    <mat-icon mat-list-icon class=\"sidenavLogo material-icons-outlined\">edit</mat-icon>\r\n                    <h4 mat-line>Edit labels</h4>\r\n                </mat-list-item>\r\n                <mat-list-item>\r\n                    <mat-icon mat-list-icon class=\"sidenavLogo material-icons-outlined\">archive</mat-icon>\r\n                    <h4 mat-line>Archive</h4>\r\n                </mat-list-item>\r\n                <mat-list-item>\r\n                    <mat-icon mat-list-icon class=\"sidenavLogo material-icons-outlined\">delete</mat-icon>\r\n                    <h4 mat-line>Trash</h4>\r\n                </mat-list-item>\r\n            </mat-nav-list>\r\n        </mat-sidenav>\r\n        <mat-sidenav-content class=\"mainContent\">\r\n            <app-add-note></app-add-note>\r\n        </mat-sidenav-content>\r\n    </mat-sidenav-container>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { FormControl, Validators, FormGroup } from '@angular/forms';\r\nimport { UserServiceService } from 'src/app/Services/UserService/user-service.service';\r\nimport {MatSnackBar} from '@angular/material/snack-bar';\r\nimport { Router } from '@angular/router';\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  LoginForm !: FormGroup;\r\n  hide = true;\r\n  constructor(private userService:UserServiceService, private snackBar:MatSnackBar, private router:Router) { }\r\n\r\n  ngOnInit(): void {\r\n     this.LoginForm = new FormGroup({\r\n      email: new FormControl('',[Validators.required,]),\r\n      password:new FormControl('',[Validators.required])\r\n    });\r\n  }\r\n  Login()\r\n  {\r\n    this.userService.Login(this.LoginForm.value)\r\n    .subscribe((result:any)=>{\r\n      console.log(result);\r\n        localStorage.setItem('token',result.jwtToken);\r\n        localStorage.setItem('userDetails',JSON.stringify(result.userData));\r\n        this.snackBar.open(`${result.message}`, '', {\r\n          duration: 3000,\r\n          verticalPosition: 'bottom',\r\n          horizontalPosition: 'left'\r\n        });\r\n        if(result.status == true)\r\n        {\r\n          this.router.navigate(['/home']);\r\n        }\r\n    },error => {  \r\n      this.snackBar.open(`${error.error.message}`, '', {\r\n        duration: 3000,\r\n        verticalPosition: 'bottom',\r\n        horizontalPosition: 'left'\r\n      });\r\n    })\r\n    \r\n  }\r\n}\r\n","<div class=\"login_container\">\r\n    <mat-card class=\"login_card\">\r\n      <div class=\"login_inputs\">\r\n        <mat-card-title>\r\n          <span style=\"color: #4285F4;\">F</span>\r\n          <span style=\"color: #EA4335;\">u</span>\r\n          <span style=\"color: #FBBC05;\">n</span>\r\n          <span style=\"color: #4285F4;\">d</span>\r\n          <span style=\"color: #34A853;\">o</span>\r\n          <span style=\"color: #EB4E41;\">o</span>\r\n        </mat-card-title>\r\n        <h2>Sign in</h2>\r\n        <h3>Use your Fundoo Notes Account</h3>\r\n  \r\n        <form class=\"login-form\" [formGroup] =\"LoginForm\">\r\n          <div>\r\n            <mat-form-field appearance=\"outline\">\r\n              <mat-label>User name</mat-label>\r\n              <input type=\"email\" matInput id=\"email\" formControlName =\"email\">\r\n              <mat-error *ngIf=\"LoginForm.controls['email'].invalid\">value is required</mat-error>\r\n            </mat-form-field>\r\n          </div>\r\n  \r\n          <div>\r\n            <mat-form-field appearance=\"outline\">\r\n              <mat-label>Password</mat-label>\r\n              <input [type]=\"hide ? 'password' : 'text'\" matInput id=\"password\" formControlName =\"password\">\r\n              <button mat-icon-button matSuffix (click)=\"hide = !hide\" [attr.aria-label]=\"'Hide password'\" [attr.aria-pressed]=\"hide\">\r\n                <mat-icon>{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\r\n              </button>\r\n              <mat-error *ngIf=\"LoginForm.controls['password'].invalid\">value is required</mat-error>\r\n            </mat-form-field><br>\r\n            <a href=\"\" [routerLink]=\"['/forgetPassword']\" class=\"forget_password\">Forgot Password?</a>\r\n          </div>\r\n          <div class=\"button_container\">\r\n            <button [routerLink]=\"['/register']\" mat-button color=\"primary\">Create Account</button>\r\n            <button type=\"submit\" [disabled]=\"LoginForm.invalid\" mat-raised-button color=\"primary\" (click)=\"Login()\">login</button>\r\n          </div>\r\n  \r\n        </form>\r\n      </div>\r\n    </mat-card>\r\n  </div>\r\n","import { Component, OnInit } from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { NoteServiceService } from 'src/app/Services/NoteService/note-service.service';\nimport { AddNoteComponent } from '../add-note/add-note.component';\n@Component({\n  selector: 'app-note-icons',\n  templateUrl: './note-icons.component.html',\n  styleUrls: ['./note-icons.component.scss']\n})\nexport class NoteIconsComponent implements OnInit {\n  \n  constructor(private addNote:AddNoteComponent,private noteService:NoteServiceService,private snackBar:MatSnackBar) { }\n\n  ngOnInit(): void {\n  }\n  Close()\n  {\n    this.addNote.bigNote = false;\n    this.addNote.smallNote=true;\n    this.noteService.CreateNote(this.addNote.NoteForm.value)\n    .subscribe((result:any)=>{\n      this.snackBar.open(`${result.message}`, '', {\n        duration: 3000,\n        verticalPosition: 'bottom',\n        horizontalPosition: 'left'\n      });\n      \n    },error => {  \n      this.snackBar.open(`${error.error.message}`, '', {\n        duration: 3000,\n        verticalPosition: 'bottom',\n        horizontalPosition: 'left'\n      });\n  });\n  this.addNote.NoteForm.reset();\n}\n}\n","<div class=\"icons\">\n    <div>\n        <button mat-icon-button class=\"example-icon favorite-icon\" matTooltip=\"remind me\" [matMenuTriggerFor]=\"reminderMenu\">\n            <mat-icon mat-list-icon class=\"material-icons-outlined\" >add_alert\n            </mat-icon>\n        </button>\n        <button mat-icon-button class=\"example-icon favorite-icon\">\n            <mat-icon mat-list-icon class=\"material-icons-outlined\">person_add</mat-icon>\n        </button>\n        <button mat-icon-button class=\"example-icon favorite-icon\" [matMenuTriggerFor]=\"colorMenu\">\n            <mat-icon mat-list-icon class=\"material-icons-outlined\">color_lens</mat-icon>\n        </button>\n        <button mat-icon-button class=\"example-icon favorite-icon\">\n            <mat-icon mat-list-icon class=\"material-icons-outlined\">image</mat-icon>\n        </button>\n        <button mat-icon-button class=\"example-icon favorite-icon\">\n            <mat-icon mat-list-icon class=\"material-icons-outlined\">archive</mat-icon>\n        </button>\n        <button mat-icon-button class=\"example-icon favorite-icon\" [matMenuTriggerFor]=\"labelMenu\">\n            <mat-icon mat-list-icon class=\"material-icons-outlined\">more_vert</mat-icon>\n        </button>\n        <button mat-icon-button class=\"example-icon favorite-icon\">\n            <mat-icon mat-list-icon class=\"material-icons-outlined\">redo</mat-icon>\n        </button>\n        <button mat-icon-button class=\"example-icon favorite-icon\">\n            <mat-icon mat-list-icon class=\"material-icons-outlined\">undo</mat-icon>\n        </button>\n    </div>\n    <div>\n        <button mat-button color=\"primary\" (click)=\"Close()\">Close</button>\n    </div>\n</div>\n<mat-menu #labelMenu=\"matMenu\" class=\"note_menu\">\n    <button mat-menu-item>Add Label</button>\n</mat-menu>\n<mat-menu #reminderMenu=\"matMenu\" class=\"note_menu\">\n    <button mat-menu-item>Today</button>\n    <button mat-menu-item>Tommorow</button>\n    <button mat-menu-item>Next Week</button>\n</mat-menu>\n<mat-menu #colorMenu=\"matMenu\" class=\"color_menu\">\n    <div mat-menu-item>\n        <span>sadf</span>\n        <span>sadf</span>\n        <span>sadf</span>\n        <span>sadf</span>\n        <span>sadf</span>\n    </div>\n    <div mat-menu-item>\n        <span>sadf</span>\n        <span>sadf</span>\n        <span>sadf</span>\n        <span>sadf</span>\n        <span>sadf</span>\n    </div>\n</mat-menu>","import { Component, OnInit } from '@angular/core';\r\nimport { FormControl, Validators, FormGroup } from '@angular/forms';\r\nimport { UserServiceService } from 'src/app/Services/UserService/user-service.service';\r\nimport {MatSnackBar} from '@angular/material/snack-bar';\r\nimport { Router } from '@angular/router';\r\n@Component({\r\n  selector: 'app-register',\r\n  templateUrl: './register.component.html',\r\n  styleUrls: ['./register.component.scss']\r\n})\r\nexport class RegisterComponent implements OnInit {\r\n  RegisterForm !: FormGroup;\r\n  hide:boolean =  true;\r\n  isVisible:boolean =  true;\r\n\r\n  constructor(private userService:UserServiceService, private snackBar:MatSnackBar, private router:Router) {\r\n   }\r\n\r\n  ngOnInit(): void {\r\n    this.RegisterForm = new FormGroup({\r\n      firstName: new FormControl('',[Validators.required, Validators.pattern('^[A-Z]{1}[a-zA-Z]{2,}'),Validators.minLength(3)]),\r\n      lastName: new FormControl('',[Validators.required, Validators.pattern('^[A-Z]{1}[a-zA-Z]{2,}'),Validators.minLength(3)]),\r\n      email: new FormControl('',[Validators.required, Validators.email]),\r\n      password:new FormControl('',[Validators.required, Validators.pattern('^.*(?=.{8,})(?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[!*@#$%^&+=]).*$')]),\r\n      confirmPassword:new FormControl('',[Validators.required])\r\n    });\r\n  }\r\n  \r\n  showPassword()\r\n  {\r\n    this.hide = !this.hide;\r\n  }\r\n  getErrorMessage(inputName:string) {\r\n      let minLen = inputName==\"password\"?8:3;\r\n      \r\n      if (this.RegisterForm.controls[`${inputName}`].hasError('required')) {\r\n        return 'You must enter a value';\r\n      }\r\n      else if(this.RegisterForm.controls[`${inputName}`].hasError('minlength')){\r\n        return `minimum ${minLen} characters`;\r\n      }\r\n      else if(this.RegisterForm.controls[`${inputName}`].hasError('email'))\r\n      {\r\n        return `${inputName} is invalid`;\r\n      }\r\n      return this.RegisterForm.controls[`${inputName}`].hasError('pattern') ? `${inputName} is invalid` : '';\r\n  }\r\n\r\n  Register()\r\n  {\r\n    this.userService.Register(this.RegisterForm.value)\r\n    .subscribe((result:any)=>{\r\n      this.snackBar.open(`${result.message}`, '', {\r\n          duration: 3000,\r\n          verticalPosition: 'bottom',\r\n          horizontalPosition: 'left'\r\n        });\r\n        if(result.status == true)\r\n        {\r\n          this.router.navigate(['/login']);\r\n        }\r\n    },error => {  \r\n      this.snackBar.open(`${error.error.message}`, '', {\r\n        duration: 3000,\r\n        verticalPosition: 'bottom',\r\n        horizontalPosition: 'left'\r\n      });\r\n    })\r\n    \r\n  }\r\n\r\n  \r\n}\r\n\r\n","<div class=\"register_container\">\r\n  <mat-card class=\"register_card\">\r\n    <div class=\"register_inputs\">\r\n      <mat-card-title>\r\n        <span style=\"color: #4285F4;\">F</span>\r\n        <span style=\"color: #EA4335;\">u</span>\r\n        <span style=\"color: #FBBC05;\">n</span>\r\n        <span style=\"color: #4285F4;\">d</span>\r\n        <span style=\"color: #34A853;\">o</span>\r\n        <span style=\"color: #EB4E41;\">o</span>\r\n      </mat-card-title>\r\n      <h2>Create your Fundoo Notes Account</h2>\r\n\r\n      <form class=\"register-form\" [formGroup]=\"RegisterForm\">\r\n        <div class=\"inline-inputs\">\r\n          <mat-form-field appearance=\"outline\">\r\n            <mat-label>First name</mat-label>\r\n            <input type=\"text\" matInput id=\"firstName\" formControlName=\"firstName\">\r\n            <mat-error *ngIf=\"RegisterForm.controls['firstName'].invalid\">{{getErrorMessage(\"firstName\")}}</mat-error>\r\n          </mat-form-field>\r\n\r\n          <mat-form-field appearance=\"outline\">\r\n            <mat-label>Last name</mat-label>\r\n            <input type=\"text\" matInput id=\"lastName\" formControlName=\"lastName\">\r\n            <mat-error *ngIf=\"RegisterForm.controls['lastName'].invalid\">{{getErrorMessage(\"lastName\")}}</mat-error>\r\n          </mat-form-field>\r\n        </div>\r\n        <div>\r\n          <mat-form-field appearance=\"outline\" class=\"form-input\">\r\n            <mat-label>User name</mat-label>\r\n            <input type=\"email\" matInput id=\"email\" formControlName=\"email\">\r\n            <mat-hint>You can use letters, numbers &amp; periods</mat-hint>\r\n            <mat-error *ngIf=\"RegisterForm.controls['email'].invalid\">{{getErrorMessage(\"email\")}}</mat-error>\r\n          </mat-form-field>\r\n        </div>\r\n\r\n        <div class=\"inline-inputs\">\r\n          <mat-form-field appearance=\"outline\" (click)=\"this.isVisible=false\">\r\n            <mat-label>Password</mat-label>\r\n            <input [type]=\"hide?'password':'text'\" matInput id=\"password\" formControlName=\"password\">\r\n            <mat-error *ngIf=\"RegisterForm.controls['password'].invalid\">{{getErrorMessage(\"password\")}}</mat-error>\r\n\r\n          </mat-form-field>\r\n\r\n          <mat-form-field appearance=\"outline\" (click)=\"this.isVisible=false\">\r\n            <mat-label>Confirm</mat-label>\r\n            <input [type]=\"hide?'password':'text'\" matInput id=\"confirmPassword\" formControlName=\"confirmPassword\"\r\n              pattern=\"{{ this.RegisterForm.value.password}}\">\r\n            <mat-error *ngIf=\"RegisterForm.controls['confirmPassword'].invalid\">Password doesn't match</mat-error>\r\n          </mat-form-field>\r\n          <mat-hint style=\"margin-top: -13px;margin-left: 11px; width:200%;\"\r\n            [style.display]=\"isVisible ? 'block' : 'none'\">Use 8 or more characters with a mix of letters, numbers\r\n            &amp; symbols</mat-hint>\r\n        </div>\r\n        <div>\r\n          <mat-checkbox id=\"showPassword\" style=\"margin-left: 3px;\" (click)=\"showPassword()\">Show Password\r\n          </mat-checkbox>\r\n        </div>\r\n        <div class=\"button_container\">\r\n          <button [routerLink]=\"['/login']\" mat-button color=\"primary\">Sign in instead</button>\r\n          <button mat-raised-button [disabled]=\"RegisterForm.invalid\" color=\"primary\"\r\n            (click)=\"Register()\">Register</button>\r\n        </div>\r\n\r\n      </form>\r\n    </div>\r\n    <div class=\"register_image_container\">\r\n      <img src=\"../../../assets/images/account.svg\" />\r\n      <p>Add your notes and reminder here</p>\r\n    </div>\r\n  </mat-card>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { FormControl, Validators, FormGroup } from '@angular/forms';\r\nimport { UserServiceService } from 'src/app/Services/UserService/user-service.service';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Router } from '@angular/router';\r\n@Component({\r\n  selector: 'app-reset-password',\r\n  templateUrl: './reset-password.component.html',\r\n  styleUrls: ['./reset-password.component.scss']\r\n})\r\nexport class ResetPasswordComponent implements OnInit {\r\n  hide: boolean = true;\r\n  ResetPasswordForm !: FormGroup;\r\n  userEmail=localStorage.getItem('email');\r\n  constructor(private userService: UserServiceService, private snackBar: MatSnackBar, private router: Router) { }\r\n \r\n  ngOnInit(): void {\r\n    this.ResetPasswordForm = new FormGroup({\r\n      email: new FormControl(`${this.userEmail}`, [Validators.required]),\r\n      password: new FormControl('', [Validators.required, Validators.pattern('^.*(?=.{8,})(?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[!*@#$%^&+=]).*$')]),\r\n      confirmPassword: new FormControl('', [Validators.required])\r\n    });\r\n  }\r\n  showPassword() {\r\n    this.hide = !this.hide;\r\n  }\r\n  getErrorMessage() {\r\n    if (this.ResetPasswordForm.controls['password'].hasError('required')) {\r\n      return 'You must enter a value';\r\n    }\r\n    return this.ResetPasswordForm.controls['password'].hasError('pattern') ? `password should contain mix of numbers,speacial characters,captial and small letters and minimum 8 characters` : '';\r\n  }\r\n\r\n  ResetPassword() {\r\n    console.log(\"resetpassword\");\r\n    \r\n    this.userService.ResetPassword(this.ResetPasswordForm.value)\r\n      .subscribe((result: any) => {\r\n\r\n        this.snackBar.open(`${result.message}`, '', {\r\n          duration: 3000,\r\n          verticalPosition: 'bottom',\r\n          horizontalPosition: 'left'\r\n        });\r\n        if (result.status == true) {\r\n          localStorage.clear();\r\n          this.router.navigate(['/login']);\r\n        }\r\n      }, error => {\r\n        this.snackBar.open(`${error.error.message}`, '', {\r\n          duration: 3000,\r\n          verticalPosition: 'bottom',\r\n          horizontalPosition: 'left'\r\n        });\r\n      })\r\n\r\n  }\r\n}\r\n\r\n","<div class=\"ResetPassword_container\">\r\n    <mat-card class=\"ResetPassword_card\">\r\n        <div class=\"ResetPassword_inputs\">\r\n            <mat-card-title>\r\n                <span style=\"color: #4285F4;\">F</span>\r\n                <span style=\"color: #EA4335;\">u</span>\r\n                <span style=\"color: #FBBC05;\">n</span>\r\n                <span style=\"color: #4285F4;\">d</span>\r\n                <span style=\"color: #34A853;\">o</span>\r\n                <span style=\"color: #EB4E41;\">o</span>\r\n            </mat-card-title>\r\n            <h2>Reset Password</h2>\r\n            <h3>Enter your New Password</h3>\r\n            <form class=\"ResetPassword-form\" [formGroup] =\"ResetPasswordForm\">\r\n                <div>\r\n                    <mat-form-field appearance=\"outline\">\r\n                      <mat-label>User name</mat-label>\r\n                      <input type=\"email\" matInput id=\"email\" formControlName =\"email\" >\r\n                      <mat-error *ngIf=\"ResetPasswordForm.controls['email'].invalid\">value is required</mat-error>\r\n                    </mat-form-field>\r\n                  </div>\r\n                <div>\r\n                    <mat-form-field appearance=\"outline\">\r\n                        <mat-label>Password</mat-label>\r\n                        <input [type]=\"hide?'password':'text'\" matInput id=\"password\" formControlName =\"password\">\r\n                        <mat-error *ngIf=\"ResetPasswordForm.controls['password'].invalid\">{{getErrorMessage()}}</mat-error>\r\n                    </mat-form-field>\r\n                </div>\r\n                <div>\r\n                    <mat-form-field appearance=\"outline\">\r\n                        <mat-label>Confirm Password</mat-label>\r\n                        <input [type]=\"hide?'password':'text'\" matInput id=\"confirmPassword\" formControlName =\"confirmPassword\" pattern=\"{{ this.ResetPasswordForm.value.password}}\">\r\n                        <mat-error *ngIf=\"ResetPasswordForm.controls['confirmPassword'].invalid\">Password doesn't match</mat-error>\r\n                    </mat-form-field>\r\n                </div>\r\n                <div>\r\n                    <mat-checkbox id=\"showPassword\" (click)=\"showPassword()\">Show Password</mat-checkbox>\r\n                </div>\r\n                <div class=\"button_container\">\r\n                    <button type=\"submit\" mat-raised-button color=\"primary\" [disabled]=\"ResetPasswordForm.invalid\" (click)=\"ResetPassword()\">Change password</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    </mat-card>\r\n</div>","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class HttpServiceService {\r\n\r\n  constructor(private http:HttpClient) { }\r\n\r\n  post(url:string,data:any=null,isHeaderRequired:any=false,headers:any=false)\r\n  {\r\n    console.log(url,data+\"value\");\r\n    return this.http.post(url,data,isHeaderRequired && headers)\r\n  }\r\n\r\n  put(url:string,data:any=null,isHeaderRequired:any=false,headers:any=false)\r\n  {\r\n    console.log(\"httpservice\",url,data);\r\n    \r\n    console.log(url,data+\"value\");\r\n    return this.http.put(url,data,isHeaderRequired && headers)\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { HttpServiceService } from '../HttpService/http-service.service';\nimport { environment } from 'src/environments/environment';\n@Injectable({\n  providedIn: 'root'\n})\nexport class NoteServiceService {\n  userDetails= JSON.parse(localStorage.getItem('userDetails')!);\n  constructor(private httpService:HttpServiceService) { }\n  \n  header = {\n    headers:{ Authorization:\"Bearer \" + localStorage.getItem('token')}\n  };\n  CreateNote(data:any){\n    data.UserId= this.userDetails.userId;\n    return this.httpService.post(`${environment.baseUrl}/api/addNotes`,data,true,this.header);\n  }\n}\n\n","import { Injectable } from '@angular/core';\r\nimport { HttpServiceService } from '../HttpService/http-service.service';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserServiceService {\r\n\r\n  constructor(private httpService:HttpServiceService) { }\r\n\r\n  Register(data:any)\r\n  {\r\n    const params = {\r\n      FirstName: data.firstName,\r\n      LastName: data.lastName,\r\n      Email: data.email,\r\n      Password: data.password\r\n    }\r\n    return this.httpService.post(`${environment.baseUrl}/api/register`,params);\r\n  }\r\n\r\n  Login(data:any)\r\n  {\r\n    const params = {\r\n      Email: data.email,\r\n      Password: data.password\r\n    }\r\n    return this.httpService.post(`${environment.baseUrl}/api/login`,params);\r\n  }\r\n\r\n  ForgetPassword(data:any)\r\n  {\r\n    return this.httpService.post(`${environment.baseUrl}/api/forgotPassword?email=${data}`);\r\n  }\r\n\r\n  ResetPassword(data:any)\r\n  {\r\n    \r\n    const params = {\r\n      Email: data.email,\r\n      Password: data.password\r\n    }\r\n    return this.httpService.put(`${environment.baseUrl}/api/resetPassword`,params);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { RegisterComponent } from './Components/register/register.component';\r\nimport { LoginComponent } from './Components/login/login.component';\r\nimport { ForgetPasswordComponent } from './Components/forget-password/forget-password.component';\r\nimport { ResetPasswordComponent } from './Components/reset-password/reset-password.component';\r\nimport { HomeComponent } from './Components/home/home.component';\r\nvar token:any;\r\ntoken = localStorage.getItem('token');\r\nconst routes: Routes = [\r\n  {\r\n    path:'register',component:RegisterComponent,\r\n  },\r\n  {\r\n    path:'login',component:LoginComponent,\r\n  },\r\n  {\r\n    path:'forgetPassword',component:ForgetPasswordComponent,\r\n  },\r\n  {\r\n    path:`resetPassword/${token}`,component:ResetPasswordComponent,\r\n  },\r\n  {\r\n    path:`home`,component:HomeComponent,\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes, {\r\n    initialNavigation: 'enabled'\r\n})],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'FundooNotes';\n}\n","<router-outlet></router-outlet>","import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { RegisterComponent } from './Components/register/register.component';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { MatSliderModule } from '@angular/material/slider';\r\nimport {MatExpansionModule} from '@angular/material/expansion';\r\nimport {MatCardModule} from '@angular/material/card';\r\nimport {MatFormFieldModule} from '@angular/material/form-field';\r\nimport {MatInputModule} from '@angular/material/input';\r\nimport {MatCheckboxModule} from '@angular/material/checkbox';\r\nimport {MatButtonModule} from '@angular/material/button';\r\nimport { LoginComponent } from './Components/login/login.component';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport {MatIconModule} from '@angular/material/icon';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport {MatSnackBarModule} from '@angular/material/snack-bar';\r\nimport { ForgetPasswordComponent } from './Components/forget-password/forget-password.component';\r\nimport { ResetPasswordComponent } from './Components/reset-password/reset-password.component';\r\nimport { HomeComponent } from './Components/home/home.component';\r\nimport {MatToolbarModule} from '@angular/material/toolbar';\r\nimport {MatSidenavModule} from '@angular/material/sidenav';\r\nimport {MatListModule} from '@angular/material/list';\r\nimport { AddNoteComponent } from './Components/add-note/add-note.component';\r\nimport { NoteIconsComponent } from './Components/note-icons/note-icons.component';\r\nimport {MatMenuModule} from '@angular/material/menu';\r\nimport {MatDialogModule} from '@angular/material/dialog';\r\nimport {MatTooltipModule} from '@angular/material/tooltip';\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    RegisterComponent,\r\n    LoginComponent,\r\n    ForgetPasswordComponent,\r\n    ResetPasswordComponent,\r\n    HomeComponent,\r\n    AddNoteComponent,\r\n    NoteIconsComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule.withServerTransition({ appId: 'serverApp' }),\r\n    AppRoutingModule,\r\n    BrowserAnimationsModule,\r\n    MatSliderModule,\r\n    MatExpansionModule,\r\n    MatCardModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatCheckboxModule,\r\n    MatButtonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatIconModule,\r\n    HttpClientModule,\r\n    MatSnackBarModule,\r\n    MatToolbarModule,\r\n    MatSidenavModule,\r\n    MatListModule,\r\n    MatMenuModule,\r\n    MatDialogModule,\r\n    MatTooltipModule\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  baseUrl:'https://localhost:44337',\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  platformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n});\n"],"names":[],"sourceRoot":"webpack:///"}